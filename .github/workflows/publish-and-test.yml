# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Docker image and Test QA

on:
  push:
    branches: [develop]
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_NAME: ${{ vars.DOCKERHUB_USERNAME }}/openelis-global-2

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_NAME }}:buildcache,mode=max

  build-and-push-image-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}

      - name: Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_NAME }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_NAME }}-frontend:buildcache,mode=max

      - name: Build Docker image
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: false

  build-and-push-image-frontend-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAME }}

      - name: Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_NAME }}-frontend:buildcache-dev
          cache-to: type=registry,ref=${{ env.DOCKER_NAME }}-frontend:buildcache-dev,mode=max

      - name: Build Docker image
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false

  install:
    needs: [build-and-push-image, build-and-push-image-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout OpenELIS-Global2
        uses: actions/checkout@v4
        with:
          repository: ${{github.repository}}

      - name: Run OpenELS image
        run: docker-compose -f test.docker-compose.yml up -d

      - name: Sleep for 2 minutes
        run: sleep 2m
        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
        working-directory: frontend

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Install React scripts
        run: npm install react-scripts@5.0.1 -g
        working-directory: frontend

      - name: Run Frontend Qa Workflow
        run: npx cypress run â€“headed
        working-directory: frontend
